<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" 
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
    xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.1.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
      http://www.springframework.org/schema/task
      http://www.springframework.org/schema/task/spring-task-4.1.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
     
    <mvc:annotation-driven/>  
    <!-- 自动装载 @Autowire @Resource @PostConstruct @PreDestroy -->
    <context:annotation-config />
    
    <context:component-scan base-package="com.wh.whtth" /> 
	<mvc:interceptors>  
    	<mvc:interceptor>  
           	<mvc:mapping path="/user/**"/> 
           	<mvc:mapping path="/admin/**"/> 
           	<mvc:mapping path="/shop/**"/> 
           <bean class="com.wh.whtth.interceptor.BaseInterceptor"/>  
        </mvc:interceptor>
    </mvc:interceptors>

	<!-- 加载数据库属性配置文件 -->
	<context:property-placeholder location="classpath:properties/db.properties"  ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath:log4j.properties"  ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath:properties/img.properties"  ignore-unresolvable="true"/>
	<!-- 开启任务调度及异步 
	<task:annotation-driven/>-->
	 
	<!-- 数据库连接池  alibaba durid 配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="url" value="${db.url}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />
        <!-- 可配可不配，默认会根据URL属性 选择不同的驱动-->
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="filters" value="stat" />
        <property name="initialSize" value="1" />
        <property name="maxActive" value="20" />
        <property name="minIdle" value="1" />
        <property name="maxWait" value="60000" />
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x' from dual" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="maxOpenPreparedStatements"  value="100" />
    </bean>
	
	
	<!-- session工厂 -->
	<bean id="sessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="mapperLocations" value="classpath*:com/wh/whtth/mapper/*.xml"></property>
	</bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wh.whtth.idao" />
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="globalRollbackOnParticipationFailure" value="false" />
	</bean> 
	
	<!-- 声明使用注解式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- <bean id="serviceCheck" class="com.ruibang.util.ServiceTimeLog"/>  -->
	<!-- 配置事务通知属性
 	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="register*" propagation="REQUIRED" />
			<tx:method name="new*" propagation="REQUIRED" />
			<tx:method name="set*" propagation="REQUIRED" />
			<tx:method name="submit*" propagation="REQUIRED" />
			<tx:method name="access*" propagation="REQUIRED" />

			<tx:method name="get*"  read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	 -->
	<!-- 配置事务切面   
	execution(* cn.com.pubinfo.service.*.*(..))" 定义在service包里的任意方法
	execution(* cn.com.pubinfo.service..*.*(..))" 定义在service包和所有子包里的任意类的任意方法
	
 	<aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* com.ruibang.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
		<aop:aspect id="serviceTimeLog" ref="serviceCheck">
			<aop:before method="before" pointcut-ref="serviceOperation" arg-names=""/>
			<aop:after method="after" pointcut-ref="serviceOperation"/>
		</aop:aspect>
	</aop:config>
  -->

	<!-- 文件上传 -->
  	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
     	<property name="maxUploadSize" value="1024000"></property>
 	</bean>  
	<!-- 视图解释器 -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="text/xml" />
				<entry key="htm" value="text/html" />
			</map>
		</property>
		<property name="defaultContentType" value="text/html"/>
	</bean>
		
	<cache:annotation-driven/>
		
	 <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
<!-- 				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="adverExtend" />
				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="adverModel" />
				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="umap" />
				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="provinces" />
				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="checkphone" /> -->
			</set>
		</property>
	</bean>
	
</beans>
